<style>
  .modal-mask {
    position: fixed;
    z-index: 9998;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, .5);
    display: table;
  }

  .modal-wrapper {
    display: table-cell;
    vertical-align: middle;
  }

  .modal-container {
    width: 600px;
    margin: 0px auto;
    padding: 5px 10px;
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, .33);
    font-family: Helvetica, Arial, sans-serif;
  }

  .modal-header h4 {
    margin-top: 0;
    color: #42b983;
  }

  .modal-body {
    margin: 0px 0;
  }

  .modal-default-button {
    float: right;
  }
  .title {
    font-weight: 300;
    display: block;
    padding-bottom: 5px;
    position: relative;
    font-weight: bolder;
  }

  .title:before {
    content: "";
    position: absolute;
    width: 100px;
    height: 1px;
    bottom: 0;
    left: -5%;
    border-bottom: 1px solid red;
  }

  .title:after {
    content: "";
    position: absolute;
    width: 250px;
    height: 1px;
    bottom: 0;
    left: 5%;
    border-bottom: 1px solid red;
  }
</style>

<script src="./vendors/jquery-knob/dist/jquery.knob.min.js"></script>
<script src="../build/js/vue.min.js"></script>

<div id="app">
  <div class="right_col" role="main">
    <formula v-if="showFormulaModal" @cancel="showFormulaModal = false" @close="showFormulaModal = false">
    </formula>
    <div class="">
      <div class="page-title">
        <div class="title_left">
          <h3>機種管理看板
          </h3>
        </div>

        <div class="title_right">
          <div class="col-md-3 col-sm-3 col-xs-12 form-group pull-right top_search">
            <label for="" style="margin-right: 10px">${now}</label>
          </div>
        </div>
      </div>
      <div class="col-md-6 col-sm-6 col-xs-12 form-group top_search">
        <button class="btn btn-info btn-xs" @click="showFormula" style="float: left">此頁公式</button>
      </div>
      <div class="col-md-6 col-sm-6 col-xs-12 form-group top_search">
        <div class="form-inline pull-right">
          <label for="" style="margin-right: 10px">Auto Refresh</label>
          <div class="radio">
            <label>
              <input name="autoRefresh" type="radio" value="-1" class="flat">
              <span style="margin-left: 5px; margin-right: 5px">NA</span>
            </label>
          </div>
          <div class="radio">
            <label>
              <input name="autoRefresh" type="radio" value="60000" class="flat">
              <span style="margin-left: 5px; margin-right: 5px">60s</span>
            </label>
          </div>
        </div>
      </div>
      <div class="clearfix"></div>

      <div class="row">
        <div class="col-md-6">
          <div class="x_panel">
            <div class="row">
              <div class="col-md-4">
                <h2>機台：${mahnum}</h2>
              </div>
              <div class="col-md-4">
                <h2>模號：${mold}</h2>
              </div>
              <div class="col-md-4">
                <h2>
                  <span class="label label-primary">${status}</span>
                </h2>
              </div>
            </div>
            <div class="row">
              <div class="col-md-8">
                <h2>料號：${pn}</h2>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6">
                <h2 class="title">生產時間：${UpToNow_Interval}</h2>
                <h2 class="title">損失時間：${Loss_Interval}</h2>
              </div>
            </div>
          </div>
        </div>
        <div class="col-md-6 col-sm-6 col-xs-12">
          <div class="x_panel">
            <canvas id="availableLineChart"></canvas>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-6">
        <div class="x_panel">
          <div class="row">
            <div class="col-md-12 text-center">
              <h1>Availability</h1>
              <input class="knob" data-width="150" data-height="150" data-angleOffset=90 data-linecap=round
                data-fgColor="#26B99A" :value="Availability" readonly>
            </div>

          </div>
        </div>
      </div>
      <div class="col-md-6 col-sm-6 col-xs-12">
        <div class="x_panel">
          <canvas id="availableBarChart"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>


<script>
  let data = {
    "mahnum": "",
    "mold": "",
    "status": "",
    "pn": "",
    "Availability": 0,
    "Loss_Interval": 0,
    "UpToNow_Interval": 0,
    "showFormulaModal": false
  }

  Vue.component('formula', {
    template: '#formula-template',
    delimiters: ['${', '}'],
    data() {
      return {
      }
    },
  })

  let vm = new Vue({
    delimiters: ['${', '}'],
    el: '#app',
    data,
    created() {
      // api fetch data
      this.fetchData()
    },
    mounted() {
      setTimeout(function () {
        init_knob()
      }, 300)
      this.buildLine()
      this.buildBar()
    },
    methods: {
      showFormula() {
        this.showFormulaModal = true
      },
      fetchData() {
        var url = `/kanban/api/available/data?mah_num={{mah_num}}`;
        fetch(url, {
          method: 'GET',
          credentials: "same-origin"
        }).then((response) => {
          return response.json();
        }).then((data) => {
          if (data.length) {
            this.mahnum = data[0].mahnum
            this.pn = data[0].pn
            this.mold = data[0].mold
            this.status = data[0].status
            this.Availability = data[0].Availability
            this.Loss_Interval = data[0].Loss_Interval
            this.UpToNow_Interval = data[0].UpToNow_Interval
          }
        }).catch((err) => {
          console.error(err);
        });
      },
      async fetchStatusData() {
        let url = `/kanban/api/available/statusData?mah_num={{mah_num}}`;
        let options = {
          method: 'GET',
          credentials: "same-origin"
        }
        let json = {
          label: [],
          interval: []
        }
        try {
          const response = await fetch(url, options)
          json = response.json()
        } catch (err) {
          console.error(err)
        } finally {
          return json
        }
      },
      async fetchCtData() {
        let url = `/kanban/api/available/ctData?mah_num={{mah_num}}`;
        let options = {
          method: 'GET',
          credentials: "same-origin"
        }
        let json = {
          label: [],
          targetData: [],
          realData: []
        }
        try {

          const response = await fetch(url, options)
          json = await response.json()
        } catch (err) {
          console.error(err)
        } finally {
          return json
        }
      },
      async buildLine() {
        if ($("#availableLineChart").length) {
          console.log('buildLine()')

          // step 1: fetch data
          let json = JSON.parse('{{ctData}}'.replace(/&quot;/g, '"'))
          /*
          json.label = ['8', '10', '12', '14', '16', '18', '20', '22', '0', '2', '4', '6']
          json.targetData = [90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90]
          json.realData = [90, 92, 89, 90, 92, 91, 94, 95, 92, 91, 89, 94]
          /**/
          console.log(json)

          // step 2: build chart
          let chartData = {
            labels: json.label,
            datasets: [{
              label: '時間稼動率',
              data: json.realData,
              backgroundColor: "#4286f4", // blue
              borderColor: "#4286f4",
              fill: false,
              lineTension: 0.3
            }, {
              label: '目標稼動率',
              data: json.targetData,
              backgroundColor: "#f44141", // red
              borderColor: "#f44141",
              fill: false,
              lineTension: 0.3
            }]
          }
          let options = {
            legend: {
              display: true,
              position: 'bottom'
            },
            scales: {
              yAxes: [{
                ticks: {
                  beginAtZero: true,
                  callback: function (value, index, values) {
                    return value + '%';
                  },
                  suggestedMin: 0
                  // stepSize: 20
                },
                gridLines: {
                  display: true
                }
              }]
            }
          }

          console.log('initialize line chart')
          const ctx = document.getElementById('availableLineChart').getContext('2d');
          const availableLineChart = new Chart(ctx, {
            type: 'line',
            data: chartData,
            options: options
          });
        }
      },
      async buildBar() {
        if ($("#availableBarChart").length) {
          console.log('buildBar()')

          // step 1: fetch data
          let json = {}
          json = await this.fetchStatusData()
          /*
          json.label = ['檢驗中', '處理中', '準備中', '待機中', '停機中']
          json.interval = [60, 40, 20, 20, 10]
          /**/
          console.log(json)

          // step 2: build chart
          let chartData = {
            labels: json.label,
            datasets: [{
              label: 'Interval',
              backgroundColor: "#f44141", // red
              data: json.interval
            }]
          }
          let options = {
            /*
            legend: {
              display: false,
              position: 'bottom'
            },
            */
            scales: {
              yAxes: [{
                ticks: {
                  beginAtZero: true,
                  suggestedMin: 0,
                  // stepSize: 10,
                  callback: function (value, index, values) {
                    return value + ' 分';
                  }
                }
              }]
            }
          }

          console.log('initialize bar chart')
          const ctx = document.getElementById("availableBarChart");
          const availableBarChart = new Chart(ctx, {
            type: 'bar',
            data: chartData,
            options: options
          });
        }
      }
    },
    computed: {
      now() {
        return moment().format("YYYY-MM-DD HH:mm:ss")
      }
    }
  })

  let timer
  function autoRefresh(duration) {
    timer = setTimeout(function () {
      let url = window.location.href;
      if (url.indexOf('&autoRefreshDuration') > -1) {
        url = url.substr(0, url.lastIndexOf('&')) + '&autoRefreshDuration=' + duration
      } else {
        url += '&autoRefreshDuration=' + duration
      }
      window.location.href = url;
    }, duration);
  }
  $(document).ready(function () {
    let duration = '{{autoRefreshDuration}}';
    $("[name='autoRefresh']").filter("[value='" + duration + "']").iCheck('check')
    autoRefresh(duration);

    $("input[name='autoRefresh']").on('ifChecked', function (event) {
      console.log('autoRefresh changed: ' + $("[name='autoRefresh']:checked").val())
      clearTimeout(timer)
      if ($("[name='autoRefresh']:checked").val() > 0) {
        autoRefresh($("[name='autoRefresh']:checked").val());
      }
    });
  });

</script>
<script type="text/x-template" id="formula-template">
  <transition name="modal">
    <div class="modal-mask">
      <div class="modal-wrapper">
        <div class="modal-container">

          <div class="modal-header">
            <h4>此頁公式</h4>
          </div>

          <div class="modal-body">
            <div style="width: 100%">
              <form class="form-horizontal">

                <div class="form-group">
                  <div class="col-md-6 col-sm-6 col-xs-12">
                    生產時間:生產累積時間<br/>
                    損失時間:目標生產累積時間-生產累積時間<br/>
                    時間嫁動率:生產累積時間/目標生產累積時間<br/>
                  </div>
                </div>

              </form>
            </div>
          </div>

          <div class="modal-footer">
            <button type="button" class="btn btn-warning" style="float: right" @click="$emit('cancel')">Close</button>
          </div>
        </div>
      </div>
    </div>
  </transition>
</script>
