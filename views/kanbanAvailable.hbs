<style>
  .title {
    font-weight: 300;
    display: block;
    padding-bottom: 5px;
    position: relative;
    font-weight: bolder;
  }

  .title:before {
    content: "";
    position: absolute;
    width: 100px;
    height: 1px;
    bottom: 0;
    left: -5%;
    border-bottom: 1px solid red;
  }

  .title:after {
    content: "";
    position: absolute;
    width: 250px;
    height: 1px;
    bottom: 0;
    left: 5%;
    border-bottom: 1px solid red;
  }
</style>

<script src="./vendors/jquery-knob/dist/jquery.knob.min.js"></script>
<script src="../build/js/vue.min.js"></script>

<div id="app">
  <div class="right_col" role="main">
    <div class="">
      <div class="page-title">
        <div class="title_left">
          <h3>機種管理看板
          </h3>
        </div>

        <div class="title_right">
          <div class="col-md-3 col-sm-3 col-xs-12 form-group pull-right top_search">
            <label for="" style="margin-right: 10px">${now}</label>
          </div>
        </div>
      </div>

      <div class="clearfix"></div>

      <div class="row">
        <div class="col-md-6">
          <div class="x_panel">
            <div class="row">
              <div class="col-md-4">
                <h2>機台：${mahnum}</h2>
              </div>
              <div class="col-md-4">
                <h2>模號：${mold}</h2>
              </div>
              <div class="col-md-4">
                <h2>
                  <span class="label label-primary">${status}</span>
                </h2>
              </div>
            </div>
            <div class="row">
              <div class="col-md-8">
                <h2>料號：${pn}</h2>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6">
                <h2 class="title">生產時間：${UpToNow_Interval}</h2>
                <h2 class="title">損失時間：${Loss_Interval}</h2>
              </div>
            </div>
          </div>
        </div>
        <div class="col-md-6 col-sm-6 col-xs-12">
          <div class="x_panel">
            <canvas id="availableLineChart"></canvas>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-6">
        <div class="x_panel">
          <div class="row">
            <div class="col-md-12 text-center">
              <h1>Availability</h1>
              <input class="knob" data-width="150" data-height="150" data-angleOffset=90 data-linecap=round data-fgColor="#26B99A" :value="Availability"
                readonly>
            </div>

          </div>
        </div>
      </div>
      <div class="col-md-6 col-sm-6 col-xs-12">
        <div class="x_panel">
          <canvas id="availableBarChart"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>


<script>
  let data = {
    "mahnum": "",
    "mold": "",
    "status": "",
    "pn": "",
    "Availability": 0,
    "Loss_Interval": 0,
    "UpToNow_Interval": 0,
    label: [],
    interval: [],
  }

  let vm = new Vue({
    delimiters: ['${', '}'],
    el: '#app',
    data,
    created() {
      // api fetch data
      this.fetchData()
      this.fetchStatusData()
    },
    mounted() {
      setTimeout(function () {
        init_knob()
      }, 200)
      this.buildLine()
      this.buildBar()
    },
    methods: {
      fetchData() {
        var url = `/kanban/api/available/data?mah_num={{mah_num}}`;
        fetch(url, {
          method: 'GET',
          credentials: "same-origin"
        }).then((response) => {
          return response.json();
        }).then((data) => {
          if (data.length) {
            this.mahnum = data[0].mahnum
            this.pn = data[0].pn
            this.mold = data[0].mold
            this.status = data[0].status
            this.Availability = data[0].Availability
            this.Loss_Interval = data[0].Loss_Interval
            this.UpToNow_Interval = data[0].UpToNow_Interval
          }
        }).catch((err) => {
          console.error(err);
        });
      },
      fetchStatusData() {
        var url = `/kanban/api/available/statusData?mah_num={{mah_num}}`;
        fetch(url, {
          method: 'GET',
          credentials: "same-origin"
        }).then((response) => {
          return response.json();
        }).then((data) => {
          this.label = data.label
          this.interval = data.interval
        }).catch((err) => {
          console.error(err);
        });
      },
      buildLine() {
        if ($("#availableLineChart").length) {
          var ctx = document.getElementById('availableLineChart').getContext('2d');
          var availableLineChart = new Chart(ctx, {
            type: 'line',
            data: {
              labels: ['8', '10', '12', '14', '16', '18', '20', '22', '0', '2', '4', '6',],
              datasets: [{
                label: '時間稼動率',
                data: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
                backgroundColor: "#4286f4", // blue
                borderColor: "#4286f4",
                fill: false,
                lineTension: 0.3
              }, {
                label: '目標稼動率',
                data: [98, 98, 98, 98, 96, 98, 96, 98, 98, 98, 98, 96],
                backgroundColor: "#f44141", // red
                borderColor: "#f44141",
                fill: false,
                lineTension: 0.3
              }]
            },
            options: {
              legend: {
                display: true,
                position: 'bottom'
              },
              scales: {
                yAxes: [{
                  ticks: {
                    beginAtZero: true,
                    callback: function (value, index, values) {
                      return value + '%';
                    },
                    stepSize: 20
                  },
                  gridLines: {
                    display: true
                  }
                }]
              }
            }
          });
        }
      },
      buildBar() {
        if ($("#availableBarChart").length) {
          var ctx = document.getElementById("availableBarChart");
          var availableBarChart = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: this.label,
              datasets: [{
                label: 'Interval',
                backgroundColor: "#f44141", // red
                data: this.interval
              }]
            },
            options: {
              legend: {
                display: false,
                position: 'bottom'
              },
              scales: {
                yAxes: [{
                  ticks: {
                    beginAtZero: true,
                    stepSize: 10,
                    callback: function (value, index, values) {
                      return value + ' 分';
                    }
                  }
                }]
              }
            }
          });
        }
      }
    },
    computed: {
      now() {
        return moment().format("YYYY-MM-DD HH:mm:ss")
      }
    }
  })

</script>
