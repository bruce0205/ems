<style>
  .title {
    font-weight: 300;
    display: block;
    padding-bottom: 5px;
    position: relative;
    font-weight: bolder;
  }

  .title:before {
    content: "";
    position: absolute;
    width: 100px;
    height: 1px;
    bottom: 0;
    left: -5%;
    border-bottom: 1px solid red;
  }

  .title:after {
    content: "";
    position: absolute;
    width: 250px;
    height: 1px;
    bottom: 0;
    left: 5%;
    border-bottom: 1px solid red;
  }
</style>

<script src="./vendors/jquery-knob/dist/jquery.knob.min.js"></script>
<script src="../build/js/vue.min.js"></script>

<div id="app">
  <div class="right_col" role="main">
    <div class="page-title">
      <div class="title_left">
        <h3>機種管理看板
        </h3>
      </div>

      <div class="title_right">
        <div class="col-md-3 col-sm-3 col-xs-12 form-group pull-right top_search">
          <label for="" style="margin-right: 10px">${now}</label>
        </div>
      </div>
    </div>

    <div class="col-md-6 col-sm-6 col-xs-12 form-group top_search"></div>
    <div class="col-md-6 col-sm-6 col-xs-12 form-group top_search">
      <div class="form-inline pull-right">
        <label for="" style="margin-right: 10px">Auto Refresh</label>
        <div class="radio">
          <label>
            <input name="autoRefresh" type="radio" value="-1" class="flat">
            <span style="margin-left: 5px; margin-right: 5px">NA</span>
          </label>
        </div>
        <div class="radio">
          <label>
            <input name="autoRefresh" type="radio" value="60000" class="flat">
            <span style="margin-left: 5px; margin-right: 5px">60s</span>
          </label>
        </div>
      </div>
    </div>

    <div class="clearfix"></div>

    <div class="row">
      <div class="col-md-6">
        <div class="x_panel">
          <div class="row">
            <div class="col-md-4">
              <h2>機台：${mahnum}</h2>
            </div>
            <div class="col-md-4">
              <h2>模號：${mold}</h2>
            </div>
            <div class="col-md-4">
              <h2>
                <span class="label label-primary">${status}</span>
              </h2>
            </div>
          </div>
          <div class="row">
            <div class="col-md-8">
              <h2>料號：${pn}</h2>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6">
              <h2>嫁動秒數：${real_cytime}</h2>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6">
              <h2 class="title">產出累積時間：${output_count}</h2>
              <h2 class="title">損失累積時間：${loss_count}</h2>
            </div>
          </div>
        </div>
      </div>
      <div class="col-md-6 col-sm-6 col-xs-12">
        <div class="x_panel">
          <canvas id="performanceLineChart"></canvas>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-md-6">
        <div class="x_panel">
          <div class="row">
            <div class="col-md-12 text-center">
              <h1>Performance</h1>
              <input class="knob" data-width="150" data-height="150" data-angleOffset=90 data-linecap=round
                data-fgColor="#26B99A" :value="Performance" readonly>
            </div>

          </div>
        </div>
      </div>
      <div class="col-md-6 col-sm-6 col-xs-12">
        <div class="x_panel">
          <canvas id="performanceBarChart"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let data = {
    "mahnum": "",
    "mold": "",
    "status": "",
    "pn": "",
    "Performance": 0,
    "real_cytime": 0,
    "output_count": 0,
    "loss_count": 0,
    ct: {
      label: [],
      targetData: [],
      realData: [],
      targetAccData: [],
      realAccData: []
    }
  }
  let vm = new Vue({
    delimiters: ['${', '}'],
    el: '#app',
    data,
    created() {
      // api fetch data
      this.fetchData()
      this.fetchCtData()
    },
    mounted() {
      setTimeout(function () {
        init_knob()
      }, 300)
      this.buildLine()
      this.buildBar()
    },
    methods: {
      fetchData() {
        var url = `/kanban/api/performance/data?mah_num={{mah_num}}`;
        fetch(url, {
          method: 'GET',
          credentials: "same-origin"
        }).then((response) => {
          return response.json();
        }).then((data) => {
          console.log(data)
          if (data.length) {
            this.mahnum = data[0].mahnum
            this.pn = data[0].pn
            this.mold = data[0].mold
            this.status = data[0].status
            this.Performance = data[0].Performance
            this.real_cytime = data[0].real_cytime
            this.output_count = data[0].output_count
            this.loss_count = data[0].loss_count
          }
        }).catch((err) => {
          console.error(err);
        });
      },
      fetchCtData() {
        var url = `/kanban/api/performance/ctData?mah_num={{mah_num}}`;
        fetch(url, {
          method: 'GET',
          credentials: "same-origin"
        }).then((response) => {
          return response.json();
        }).then((data) => {
          this.ct.label = data.label
          this.ct.targetData = data.targetData
          this.ct.realData = data.realData
          this.ct.targetAccData = data.targetAccData
          this.ct.realAccData = data.realAccData
        }).catch((err) => {
          console.error(err);
        });
      },
      buildLine() {
        if ($("#performanceLineChart").length) {
          var ctx = document.getElementById('performanceLineChart').getContext('2d');
          var performanceLineChart = new Chart(ctx, {
            type: 'line',
            data: {
              // labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],
              labels: JSON.parse(JSON.stringify(this.ct.label)),
              datasets: [{
                label: '累積目標產量',
                // data: [1, 4, 7, 10, 13, 16, 19],
                data: JSON.parse(JSON.stringify(this.ct.targetAccData)),
                backgroundColor: "#ff3236", // red
                borderColor: "#ff3236",
                fill: false,
                lineTension: 0.3
              }, {
                label: '累積實際產量',
                // data: [2, 6, 10, 14, 18, 22, 26],
                data: JSON.parse(JSON.stringify(this.ct.realAccData)),
                backgroundColor: "#9df441", // green
                borderColor: "#9df441",
                fill: false,
                lineTension: 0.3
              }]
            },
            options: {
              legend: {
                display: true,
                position: 'bottom'
              }
            }
          });
        }
      },
      buildBar() {
        if ($("#performanceBarChart").length) {
          var ctx = document.getElementById("performanceBarChart");
          var performanceBarChart = new Chart(ctx, {
            type: 'bar',
            data: {
              // labels: ["8", "10", "12", "14", "16", "18", "20"],
              labels: JSON.parse(JSON.stringify(this.ct.label)),
              datasets: [{
                label: '目標產量',
                backgroundColor: "#26B99A",
                // data: [51, 30, 40, 28, 92, 50, 45]
                data: JSON.parse(JSON.stringify(this.ct.targetData))
              }, {
                label: '實際產量',
                backgroundColor: "#03586A",
                // data: [41, 56, 25, 48, 72, 34, 12]
                data: JSON.parse(JSON.stringify(this.ct.realData))
              }]
            },

            options: {
              legend: {
                display: true,
                position: 'bottom'
              },
              scales: {
                yAxes: [{
                  ticks: {
                    beginAtZero: true
                  }
                }]
              }
            }
          });
        }
      }
    },
    computed: {
      now() {
        return moment().format("YYYY-MM-DD HH:mm:ss")
      }
    }
  })

  let timer
  function autoRefresh(duration) {
    timer = setTimeout(function () {
      let url = window.location.href;
      if (url.indexOf('&autoRefreshDuration') > -1) {
        url = url.substr(0, url.lastIndexOf('&')) + '&autoRefreshDuration=' + duration
      } else {
        url += '&autoRefreshDuration=' + duration
      }
      window.location.href = url;
    }, duration);
  }
  $(document).ready(function () {
    let duration = '{{autoRefreshDuration}}';
    $("[name='autoRefresh']").filter("[value='" + duration + "']").iCheck('check')
    autoRefresh(duration);

    $("input[name='autoRefresh']").on('ifChecked', function (event) {
      console.log('autoRefresh changed: ' + $("[name='autoRefresh']:checked").val())
      clearTimeout(timer)
      if ($("[name='autoRefresh']:checked").val() > 0) {
        autoRefresh($("[name='autoRefresh']:checked").val());
      }
    });
  });

</script>
