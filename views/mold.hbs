<style>
  td.sts-details-control {
    background: url('../build/images/plus.png') no-repeat center center;
    background-size: 14px 14px;
    cursor: pointer;
  }

  tr.sts-shown td.sts-details-control {
    background: url('../build/images/minus.png') no-repeat center center;
    background-size: 14px 14px;
  }

  td.mvs-details-control {
    background: url('../build/images/plus.png') no-repeat center center;
    background-size: 14px 14px;
    cursor: pointer;
  }

  tr.mvs-shown td.mvs-details-control {
    background: url('../build/images/minus.png') no-repeat center center;
    background-size: 14px 14px;
  }
</style>
<link href="../build/css/bootstrap-datetimepicker.min.css" rel="stylesheet">
<script src="../build/js/vue.min.js"></script>
<script src="../build/js/bootstrap-datetimepicker.min.js"></script>

<div id="app" class="right_col" role="main">
  <div class="">
    <div class="page-title">
      <div class="title_left">
        <h3>模具管理
          <small></small>
        </h3>
      </div>
    </div>

    <div class="clearfix"></div>

    <div class="row">
      <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
          <div class="x_title">
            <h2>各機種對應之模具資訊
            </h2>
            <div class="clearfix"></div>
          </div>
          <div class="x_content">
            <div class="col-md-11 col-sm-11">
              <form style="margin-left: -10px" class="form-horizontal">
                <div style="display: block;" class="col-md-3 col-sm-3 form-group">
                  <label style="text-align:left" class="control-label col-md-3 col-sm-3">機種</label>
                  <div class="col-md-9 col-sm-9">
                    <input id="pn" type="text" class="form-control" placeholder="">
                  </div>
                </div>
                <div style="display: block;" class="col-md-3 col-sm-3 form-group">
                  <label style="text-align:left" class="control-label col-md-3 col-sm-3">模號</label>
                  <div class="col-md-9 col-sm-9">
                    <input id="mold" type="text" class="form-control" placeholder="">
                  </div>
                </div>
                <div style="display: block;" class="col-md-3 col-sm-3 form-group">
                  <label style="text-align:left" class="control-label col-md-3 col-sm-3">穴位1</label>
                  <div class="col-md-9 col-sm-9">
                    <input id="hole1" type="text" class="form-control" placeholder="">
                  </div>
                </div>
                <div style="display: block;" class="col-md-3 col-sm-3 form-group">
                  <label style="text-align:left" class="control-label col-md-3 col-sm-3">穴位2</label>
                  <div class="col-md-9 col-sm-9">
                    <input id="hole2" type="text" class="form-control" placeholder="">
                  </div>
                </div>
              </form>
            </div>
            <div class="col-md-1 col-sm-1">
              <form class="form-horizontal">
                <div class="col-md-12 col-sm-12 col-xs-12 form-group">
                  <button id="searchBtn" type="button" style="float: right;" class="btn btn-primary" onclick="addMold()">
                    <i class="fa fa-plus" style="margin-right: 10px"></i>新增
                  </button>
                </div>
              </form>
            </div>

            <table id="moldTable" class="table table-striped table-bordered" cellspacing="0" width="100%">
              <thead></thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <button style="display: none;" type="button" class="btn btn-primary" onclick="showModal()">Small modal</button>
  <div id="historyModal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" style="width: 950px">
      <div class="modal-content" style="top:60px">
        <div class="modal-header">
          <button type="button" class="close" onclick='closeMoldHistoryModal()' aria-label="Close">
            <span aria-hidden="true">×</span>
          </button>
          <h4 style="font-weight: bolder">
            <span id="historyTitle"></span>
          </h4>
        </div>
        <div class="modal-body">
          <table id="moldHistoryTable" class="table table-striped table-bordered" cellspacing="0" width="100%">
            <thead></thead>
            <tbody></tbody>
          </table>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" onclick="closeMoldHistoryModal()">Close</button>
        </div>
      </div>
    </div>
  </div>

  <div id="testModal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm" style="width: 520px">
      <div class="modal-content" style="top:60px">

        <div class="modal-header">
          <button type="button" class="close" onclick='closeMoldModal()' aria-label="Close">
            <span aria-hidden="true">×</span>
          </button>
          <h4 style="font-weight: bolder">登錄更換記錄</h4>
          <h5 style="font-weight: bolder" class="modal-title">${mvs_pn} -> ${mvs_mold} -> ${pn_type}</h5>
        </div>
        <div class="modal-body">
          <form id="demo-form2" data-parsley-validate class="form-horizontal form-label-left">
            <div class="form-group">
              <label class="control-label col-md-3 col-sm-3 col-xs-12" for="first-name">User</label>
              <div class="col-md-6 col-sm-6 col-xs-12">
                <input type="text" v-model="username" class="form-control col-md-7 col-xs-12">
              </div>
            </div>
            <div class="form-group">
              <label class="control-label col-md-3 col-sm-3 col-xs-12" for="last-name">零件料號</label>
              <div class="col-md-6 col-sm-6 col-xs-12">
                <div class="form-inline">
                  <div class="checkbox">
                    <label>
                      <input id="offLine" type="checkbox" class="flat" v-model="offLine"> 下線
                    </label>
                  </div>
                </div>
                <input v-if="offLine === false" type="text" v-on:input="pnInput" v-model="pn" style="margin-top: 5px" class="form-control col-md-7 col-xs-12">

              </div>
            </div>
            <div class="form-group" v-if="offLine === false">
              <label class="control-label col-md-3 col-sm-3 col-xs-12" for="last-name">Counter數</label>
              <div class="col-md-6 col-sm-6 col-xs-12">
                <input type="number" v-model="pn_count" class="form-control col-md-7 col-xs-12">
              </div>
            </div>
            <div class="form-group">
              <label class="control-label col-md-3 col-sm-3 col-xs-12" for="last-name">更換時間</label>
              <div class="col-md-6 col-sm-6 col-xs-12">

                <div class='input-group date' id='datetimepicker1'>
                  <input type='text' class="form-control" />
                  <span class="input-group-addon">
                    <i class="glyphicon glyphicon-th"></i>
                  </span>
                </div>
              </div>
            </div>
            <div class="form-group" v-if="offLine === false">
              <label class="control-label col-md-3 col-sm-3 col-xs-12" for="last-name">Threshold</label>
              <div class="col-md-6 col-sm-6 col-xs-12">
                <input class="form-control" type="number" v-model="threshold" size="40">
              </div>
            </div>
            <div class="form-group" v-if="offLine === false">
              <label class="control-label col-md-3 col-sm-3 col-xs-12" for="last-name">Alarm %</label>
              <div class="col-md-6 col-sm-6 col-xs-12">
                <input class="form-control" type="number" v-model="alarm">
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" onclick="closeMoldModal()">Close</button>
          <button type="button" class="btn btn-primary" onclick="saveMold()">Save changes</button>
        </div>

      </div>
    </div>
  </div>
</div>

<script>
  function isEmpty(value) {
    if (value == null || value == undefined || value.length == 0 ) {
      return true
    } else {
      return false
    }
  }
  async function addMold() {
    let pnElement = $("#pn")
    let moldElelemt = $("#mold")
    let hole1Element = $("#hole1")
    let hole2Element = $("#hole2")

    // TODO: validate data
    if (isEmpty(pnElement.val()) || isEmpty(moldElelemt.val())) {
      return notify('"機種"和"模號" 資料必填', 'danger');
    }

    var url = '/mold/api/insertMold';
    let body = {
      pn: pnElement.val(),
      mold: moldElelemt.val(),
      hole1: hole1Element.val(),
      hole2: hole2Element.val()
    }

    console.log(body)

    await fetch(url, {
      method: 'POST',
      credentials: "same-origin",
      headers: new Headers({
        'Content-Type': 'application/json'
      }),
      body: JSON.stringify(body)
    }).then((response) => {
      return response.json();
    }).then((data) => {
      if (data.status === 200) {
        notify('模具新增成功', 'success');
        pnElement.val('')
        moldElelemt.val('')
        hole1Element.val('')
        hole2Element.val('')
      } else {
        notify('模具新增失敗', 'danger');
      }
    }).catch((err) => {
      console.error(err);
    });
  }
  function showAssemblyHistoryModal(event) {
    moldModule.destroyHistory();
    moldModule.buildHistory(event.data, 'assembly');
    $("#historyModal").modal('show');
  }
  function showComponentHistoryModal(event) {
    moldModule.destroyHistory();
    moldModule.buildHistory(event.data, 'component');
    $("#historyModal").modal('show');
  }

  function closeMoldHistoryModal() {
    $("#historyModal").modal('hide');
  }

  let data = {
    triggerType: '',
    mvs_pn: '',
    mvs_mold: '',
    mvs_hole1: null,
    mvs_hole2: null,
    offLine: false,
    pn_type: '',
    username: '{{account}}',
    pn: '',
    pn_date: '',
    pn_count: 0,
    threshold: 0,
    alarm: 0
  }
  let vm = new Vue({
    delimiters: ['${', '}'],
    el: '#testModal',
    data,
    methods: {
      pnInput: _.debounce(function (e) {
        let filterKey = e.target.value;
        console.log(`filterKey: ${filterKey}`);
        this.setCounter(filterKey);
        this.setConfig(filterKey);
      }, 500),
      setCounter: function (pn) {
        var url = `/mold/api/counter?mvs_component=${pn}&triggerType=${vm.$data.triggerType}`;
        fetch(url, {
          method: 'GET',
          credentials: "same-origin"
        }).then((response) => {
          return response.json();
        }).then((data) => {
          console.log(data);
          if (data.length === 0) {
            this.pn_count = 0;
          } else {
            this.pn_count = data[0][`${vm.$data.triggerType}_update_count`];
          }
        }).catch((err) => {
          console.error(err);
        });
      },
      checkComponent: async function () {
        var url = `/mold/api/component/check`;
        url += `?triggerType=${this.triggerType}`;
        url += `&component=${this.pn}`;
        try {
          let response = await fetch(url, {
            method: 'GET',
            credentials: "same-origin"
          })
          let result = await response.json()
          if (result.length === 0) {
            return true
          } else if (result[0].trigger_pn.trim() === this.mvs_pn.trim()
            && result[0].trigger_mold.trim() === this.mvs_mold.trim()
            && result[0].trigger_hole1.trim() === this.mvs_hole1.trim()
            && result[0].trigger_hole2.trim() === this.mvs_hole2.trim()
            && result[0].pn_type.trim() === this.pn_type.trim()) {
            return true
          }
          return false
        } catch (err) {
          console.error(err)
        }
      },
      setConfig: function (pn) {
        var url = `/mold/api/config?component=${pn}`;

        fetch(url, {
          method: 'GET',
          credentials: "same-origin"
        }).then((response) => {
          return response.json();
        }).then((data) => {
          console.log(data);
          if (data.length === 0) {
            this.threshold = 0
            this.alarm = 0
          } else {
            this.threshold = data[0]['threshold']
            this.alarm = data[0]['alarm_pect']
          }
        }).catch((err) => {
          console.error(err);
        });
      },
      saveConfig: function (isShowNotify) {
        console.log(this.threshold)
        console.log(this.alarm)

        let body = {
          component: this.pn,
          threshold: this.threshold,
          alarm: this.alarm
        }

        var url = '/mold/api/config';
        fetch(url, {
          method: 'POST',
          credentials: "same-origin",
          headers: new Headers({
            'Content-Type': 'application/json'
          }),
          body: JSON.stringify(body)
        }).then((response) => {
          return response.json();
        }).then((data) => {
          if (data.status === 200) {
            if (isShowNotify) {
              notify('Threshold & Alarm 更新成功', 'success');
            }
          } else {
            notify('Threshold & Alarm 更新失敗', 'danger');
          }
        }).catch((err) => {
          console.error(err);
        });

        // step 3: ui reload
        if (isShowNotify) {
          $("#testModal").modal('hide');
          moldModule.reloadShownRow(vm.$data.triggerType);
        }
      }
    }
  });

  function closeMoldModal() {
    $("#testModal").modal('hide');
    $('#datetimepicker1').data("DateTimePicker").destroy();
    $('#offLine').iCheck('destroy');
  }

  function showMoldModal(event) {
    const { data } = event
    // TODO step 1: get counter & threshold & alarm

    // step 2: data binding
    vm.triggerType = data.triggerType
    vm.mvs_pn = data.mvs_pn
    vm.mvs_mold = data.mvs_mold
    vm.mvs_hole1 = data.mvs_hole1
    vm.mvs_hole2 = data.mvs_hole2
    vm.pn = data.pn
    vm.pn_type = data.pn_type
    vm.pn_count = data.pn_count
    vm.setConfig(data.pn)

    // step 3: check offLine
    $('#offLine').iCheck({
      checkboxClass: 'icheckbox_flat-green',
      radioClass: 'iradio_flat-green'
    });
    $("#offLine").on('ifChecked', toggleOffLine);
    $("#offLine").on('ifUnchecked', toggleOffLine);
    if (data.pn.indexOf('NA') === -1) {
      $('#offLine').iCheck('uncheck');
    } else {
      $('#offLine').iCheck('check');
    }

    // step 4: set current time as default
    $('#datetimepicker1').datetimepicker({
      format: 'YYYY-MM-DD HH:mm:ss',
      date: moment().format('YYYY-MM-DD HH:mm:ss')
    });

    // step 5: show modal
    $("#testModal").modal('show');
  }

  async function saveMold() {
    // TODO step 1: check duplcate component
    let result = await vm.checkComponent()
    if (!result) {
      let triggerType = vm.$data.triggerType
      // notify(`模具零件料號重覆, ${triggerType}_pn, ${triggerType}_mold, ${triggerType}_hole1, ${triggerType}_hole2, pn_type`, 'danger');
      notify(`模具零件料號重覆, ${vm.$data.mvs_pn}, ${vm.$data.mvs_mold}, ${vm.$data.mvs_hole1}, ${vm.$data.mvs_hole2}, ${vm.$data.pn_type}`, 'danger');
      return false
    }
    // step 2: call update api
    let body = {
      triggerType: vm.$data.triggerType,
      mvs_pn: vm.$data.mvs_pn.trim(),
      mvs_mold: vm.$data.mvs_mold.trim(),
      mvs_hole1: vm.$data.mvs_hole1,
      mvs_hole2: vm.$data.mvs_hole2,
      mvs_type: vm.$data.pn_type.trim(),
      mvs_component: vm.$data.pn.trim(),
      mvs_update_datetime: $('#datetimepicker1').data("DateTimePicker").date().format('YYYY-MM-DD HH:mm:ss'),
      mvs_update_count: vm.$data.pn_count,
      mvs_update_user: vm.$data.username
    }
    if (vm.$data.offLine) {
      body.mvs_component = 'NA';
      body.mvs_update_count = null;
    } else {
      // step 2-1: update threshold & alarm
      vm.saveConfig(false)
    }

    var url = '/mold/api/record';
    await fetch(url, {
      method: 'POST',
      credentials: "same-origin",
      headers: new Headers({
        'Content-Type': 'application/json'
      }),
      body: JSON.stringify(body)
    }).then((response) => {
      return response.json();
    }).then((data) => {
      if (data.status === 200) {
        notify('更新成功', 'success');
      } else {
        notify('更新失敗', 'danger');
      }
    }).catch((err) => {
      console.error(err);
    });

    // step 3: ui reload
    $("#testModal").modal('hide');
    moldModule.reloadShownRow(vm.$data.triggerType);
  }

  function toggleOffLine(event) {
    if ($("#offLine").prop('checked')) {
      // vm.pn_count = 0;
      // vm.threshold = 0;
      // vm.alarm = 0;
    }
    vm.offLine = !vm.offLine
  }

  $(document).ready(function () {
    moldModule.build();
  });

</script>
